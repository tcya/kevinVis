[{"name": "app.py", "content": "import pandas as pd\nimport altair as alt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport shutil\n\n\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_altair, render_plotly\n\nui.input_file(\"file\", \"Choose an Excel to upload:\", multiple=True, accept=[\".xlsm\", \".xls\", \".xlsx\"]),\n\ndf = pd.DataFrame()\n\ndef read_uploaded_excel():\n    global df\n    if not input.file():\n        return\n    dfs = []\n    for file in input.file():\n        file_path = file['datapath']\n        df = pd.read_excel(file_path, sheet_name='Br RAW Data', header=[3, 4], engine=\"openpyxl\")\n        dfs.append(df)\n    df = pd.concat(dfs).drop_duplicates(ignore_index=True)\n    df.rename(columns=lambda x: '' if 'Unnamed' in x else x, inplace=True)\n    df.columns = df.columns.map(' '.join).str.strip()\n    df['Sample No'] = df['Sample No'].str.split('-', expand=True).iloc[:, 1]\n    df = df[(df['Sample No'].notna()) & (df['Sample No'] != '')]\n    df = df.dropna(how='all')\n    return df\n\n@render.download()\ndef download():\n    read_uploaded_excel()\n    path = '/tmp/merged.xlsx'\n    shutil.copy(input.file()[0]['datapath'], '/tmp/merged.xlsm')\n    res = construct_output_df()\n    res.to_excel(path, sheet_name='Br RAW Data', engine=\"openpyxl\")\n    return str(path)\n\ndef construct_output_df():\n    if not input.file():\n        return\n    res = []\n    three_empty_rows = pd.DataFrame(index=pd.RangeIndex(3), columns=df.columns, dtype='object')\n    for s in sorted(df['Sample No'].unique()):\n        if res:\n            res.append(three_empty_rows)\n        sample_header = pd.DataFrame(index=pd.RangeIndex(1), columns=df.columns, dtype='object')\n        sample_header.loc[0, 'Sample No'] = s\n        sample_header.loc[0, 'Day'] = 'x'\n        res.append(sample_header)\n        sample = df[df['Sample No'] == s].copy()\n        sample['Sample No'] = 'D' + sample['Day'].astype(str) + '-' + sample['Sample No'].astype(str)\n        res.append(sample)\n    return pd.concat(res).reset_index(drop=True)\n   \ndef plot_var_by_day(df, var, config=True):\n    selection = alt.selection_point(fields=['Sample No'], bind='legend')\n    escaped = var\n    d = df[['Day', 'Sample No', var]].dropna()\n    for c in '.[]':\n        escaped = escaped.replace(c, f'\\{c}')\n    pts = (\n        alt.Chart(d)\n        .mark_point()\n        .encode(\n            x=alt.X('Day:O', axis=alt.Axis(labelAngle=-00)),\n            y=alt.Y(escaped, title=var),\n            color='Sample No:N',\n            tooltip=['Sample No', 'Day', escaped],\n            opacity=alt.condition(selection, alt.value(1), alt.value(0.1)),\n        )\n        .add_params(selection).properties(title=var)\n    )\n    line = (\n        alt.Chart(d)\n        .mark_line()\n        .encode(\n            x=alt.X('Day:O', axis=alt.Axis(labelAngle=-00)),\n            y=alt.Y(escaped, title=var),\n            color='Sample No:N',\n            tooltip=['Sample No', 'Day', escaped],\n            opacity=alt.condition(selection, alt.value(1), alt.value(0.2)),\n        )\n        .add_params(selection)\n    )\n    res = (pts + line).interactive()\n    if not config:\n        return res\n    return res.configure_axis(\n        labelFontSize=15,\n        titleFontSize=15\n    ).configure_legend(\n        titleFontSize=15,\n        labelFontSize=15\n    ).configure_title(fontSize=20)\n\ndef create_fn(var):\n    def fn():\n        return plot_var_by_day(df, var)\n    return fn\n   \nwith ui.navset_pill(id=\"tab\"):\n    with ui.nav_panel(\"Raw data\"):\n        @render.data_frame\n        def display_df():\n            return read_uploaded_excel()\n\n    vals = [\n        'pCO2 [mmHg]',\n        'Via. [%]',\n        'VCD [106 cells/mL]',\n        'Cell Diameter [um]',\n        'Gln [mg/L]',\n        'Glu [mmol/L]',\n        'Gluc. [g/L]',\n        'Lact. [g/L]',\n        'NH4+ [mmol/L]',\n        'Osmo. [mOsm/kg]',\n        'Titer [mg/L]',\n        'Agitation [rpm]',\n        'DO [%]',\n        'Temp.  [\u00b0C]',\n        'pH (int.) [-]',\n        'pH Difference [-]',\n        'pH (ext.) [-]',\n        'pO2 [mmHg]',\n        # 'LDH (U/L)',\n        # 'Calculated Feed Addition [mL]',\n        'pCO2 % [%]',\n        'pO2 % [%]',\n        'cIVC (106 vc/mL*day)',\n        'Specific Productivity (pg/cell/day)',\n        'Culture Duration (Days)',\n        # 'Base Consumption [mL]',\n        # 'log Adjusted VC Growth\\nd0-dX \u00b5 [day-1]',\n        'Doubling Time [hr]',\n        'Glucose Consumption [g/L]',\n        'Daily Base Consumption [mL/L]',\n    ]\n    with ui.nav_panel(\"All\"):\n        @render_altair\n        def all_plots():\n            rows = []\n            for i, var in enumerate(vals):\n                if i % 3== 0:\n                    if i != 0:\n                        rows.append(res)\n                    res = plot_var_by_day(df, var, False)\n                else:\n                    res = res | plot_var_by_day(df, var, False)\n            res = rows[0]\n            for r in rows[1:]:\n                res &= r\n            return res.configure_axis(\n                labelFontSize=15,\n                titleFontSize=15\n            ).configure_legend(\n                titleFontSize=15,\n                labelFontSize=15\n            ).configure_title(fontSize=20)\n           \n    with ui.nav_panel(\"3D\"):\n        ui.input_select('y', 'Y axis', vals)\n        ui.input_select('z', 'Z axis', vals)\n       \n        @render_plotly\n        def three_d():\n            return px.scatter_3d(df, x='Day', y=input.y(), z=input.z(), color='Sample No', width=800, height=800)\n           \n    for i, var in enumerate(vals):\n        var_base = var.split(' [')[0]\n        fn = create_fn(var)\n        fn.__name__ = f'fn{i}'\n        with ui.nav_panel(var_base):\n            render_altair(fn)", "type": "text"}, {"name": "requirements.txt", "content": "anywidget\nopenpyxl\nplotly", "type": "text"}]